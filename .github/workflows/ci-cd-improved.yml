name: Improved CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  TERRAFORM_VERSION: '1.5.7'

jobs:
  # Always run tests, regardless of branch
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          npm ci --prefix frontend
          npm ci --prefix backend
          npm ci --prefix shared
      
      - name: Run linters
        run: |
          npm run lint --prefix frontend || true
          npm run lint --prefix backend || true
      
      - name: Run tests
        run: |
          npm test --prefix frontend -- run
          npm test --prefix backend -- run
      
      - name: Build validation
        run: |
          npm run build --prefix frontend
          npm run build --prefix backend
      
      - name: Report status
        if: always()
        run: |
          echo "Tests completed for branch: ${{ github.ref_name }}"
          echo "Is PR: ${{ github.event_name == 'pull_request' }}"
          echo "Target branch: ${{ github.base_ref }}"

  # Deploy to DEV only when pushing to develop (not on PRs)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    # Only deploy on push to develop, not on PRs
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/develop'
    environment: 
      name: development
      url: https://afl-predictor-frontend-dev.azurewebsites.net
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Development
        run: |
          echo "🚀 Deploying to DEVELOPMENT environment"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add actual deployment steps here
      
      - name: Notify deployment
        run: |
          echo "✅ Deployed to DEV: https://afl-predictor-frontend-dev.azurewebsites.net"

  # Deploy to PROD only when pushing to main (not on PRs)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    # Only deploy on push to main, not on PRs
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://afl-predictor-frontend-prod.azurewebsites.net
      # Requires manual approval in GitHub
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deployment approval check
        run: |
          echo "⚠️ PRODUCTION DEPLOYMENT"
          echo "Cost: $530/month"
          echo "Requires manual approval in GitHub"
      
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to PRODUCTION environment"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add actual deployment steps here
      
      - name: Notify deployment
        run: |
          echo "✅ Deployed to PROD: https://afl-predictor-frontend-prod.azurewebsites.net"
          echo "⚠️ REMINDER: This costs $530/month!"

  # Optional: Deploy feature branches to preview environments
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    # Only for feature branch PRs
    if: |
      github.event_name == 'pull_request' && 
      startsWith(github.head_ref, 'feature/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate preview URL
        id: preview
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          echo "url=https://preview-${SAFE_BRANCH}.afl-predictor.dev" >> $GITHUB_OUTPUT
      
      - name: Deploy preview
        run: |
          echo "🔍 Deploying preview for PR #${{ github.event.pull_request.number }}"
          echo "Branch: ${{ github.head_ref }}"
          echo "Preview URL: ${{ steps.preview.outputs.url }}"
          # Add preview deployment logic here (e.g., containerized deployment)
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔍 Preview deployed to: ${{ steps.preview.outputs.url }}'
            })

  # Clean up preview when PR is closed
  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed'
    
    steps:
      - name: Cleanup preview environment
        run: |
          echo "🧹 Cleaning up preview for PR #${{ github.event.pull_request.number }}"
          # Add cleanup logic here